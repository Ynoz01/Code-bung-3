/*
Aufgabe 3.13.1

Die Zahl Pi definiert sich durch folgende (unendliche) Reihe:
π = 4  -  4/3  +  4/5  -  4/7  +  4/9  -  4/11 + ...

Schreiben Sie ein Programm, das die Zahl π approximiert, in dem erst ein Term, dann zwei, dann drei usw. berechnet werden.
Lesen Sie die Anzahl der Nachkomma Stellen ein und geben die dafür notwendige Anzahl an Termen aus, um diese Pi Zahl zu approximieren.
Falls die geforderte Genauigkeit größer acht ist, geben Sie eine entsprechende Meldung aus und berechnen Pi nicht. 

Entwickeln Sie das Programm unter Verwendung einer do-while Schleife. 

Hinweis: 
Gleichheitsvergleiche auf reellen Zahlen sind grundsätzlich zu vermeiden aufgrund der Ungenauigkeit. 
Stattdessen: 
Um herauszufinden, wann z.B. zum ersten Mal 3.14 berechnet wird, 
multiplizieren Sie Ihren berechneten Wert für pi mit 100, 
casten ihn nach int und vergleichen ihn dann mit der Ganzzahl 314. 

D.h. je nach gewünschter Nachkommastellengenauigkeit multiplizieren Sie den gerade berechneten pi Wert 
mit der entsprechenden 10 er Potenz. 

Zum Beispiel:

Eingabe	Resultat
3	Anzahl Nachkomma Genauigkeit: (1 bis 8): 3
	3.141 dem nach 1688.ten Term
	
7	Anzahl Nachkomma Genauigkeit: (1 bis 8): 7
	3.1415926 dem nach 18660304.ten Term
	
0	Anzahl Nachkomma Genauigkeit: (1 bis 8): 0
	3.0 dem nach 3.ten Term
	
10	Anzahl Nachkomma Genauigkeit: (1 bis 8): 10
	Pi kann nicht approximiert werden auf 10 Stellen
*/


//CODE BEGINN

import java.util.Scanner;


class prog {
    
    public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		System.out.print("Anzahl Nachkomma Genauigkeit: (1 bis 8): ");
		int stellen = sc.nextInt();
		System.out.println(stellen);
		double pi = 4;
		int counter = 0;
		boolean case0= false;
		int output = 0;
		double print = 0;
		boolean value = true;
		
		for(int i = 3; value; i+=2)
		{
			
			if(counter%2==0) {
				pi -= (double)4/i;
			
			}
			else
				pi += (double)4/i;
			
			switch(stellen) 
			{
			case 0:
			    case0 = (int)(pi * 1)==3;
				break;
			case 1:
				case0 = (int)(pi * 10)==31;
				output = (int)(pi * 10);
				break;
			case 2:
				case0 = (int)(pi * 100)==314;
				output = (int)(pi * 100);
				break;
			case 3:
				case0 = (int)(pi * 1000)==3141;
				output = (int)(pi * 1000);
				break;
			case 4:
				case0 = (int)(pi * 10000)==31415;
				output = (int)(pi * 10000);
				break;
			case 5:
				case0 = (int)(pi * 100000)==314159;
				output = (int)(pi * 100000);
				break;
			case 6:
				case0 = (int)(pi * 1000000)==3141592;
				output = (int)(pi * 1000000);
				break;
			case 7:
				case0 = (int)(pi * 10000000)==31415926;
				output = (int)(pi * 10000000);
				break;
			case 8:
				case0 = (int)(pi * 100000000)==314159265;
				output = (int)(pi * 100000000);
				break;
			default:
				case0 = true;
				
			}
			counter++;
			value = !case0;
			
		}
		
		switch(stellen) 
		{
		case 0:
			print = (double)output;
			System.out.print((int)pi + ".0 dem nach " +( counter + 1 )+ ".ten Term");
			break;
		case 1:
			print = (double)output/10;
			System.out.print(print + " dem nach " +( counter + 1 )+ ".ten Term");
			break;
		case 2:
			print = (double)output/100;
			System.out.print(print + " dem nach " +( counter + 1 )+ ".ten Term");
			break;
		case 3:
			print = (double)output/1000;
			System.out.print(print + " dem nach " +( counter + 1 )+ ".ten Term");
			break;
		case 4:
			print = (double)output/10000;
			System.out.print(print + " dem nach " +( counter + 1 )+ ".ten Term");
			break;
		case 5:
			print = (double)output/100000;
			System.out.print(print + " dem nach " +( counter + 1 )+ ".ten Term");
			break;
		case 6:
			print = (double)output/1000000;
			System.out.print(print + " dem nach " +( counter + 1 )+ ".ten Term");
			break;
		case 7:
			print = (double)output/10000000;
			System.out.print(print + " dem nach " +( counter + 1 )+ ".ten Term");
			break;
		case 8:
			print = (double)output/100000000;
			System.out.print(print + " dem nach " +( counter + 1 )+ ".ten Term");
			break;
		default:
			System.out.println("Pi kann nicht approximiert werden auf " + stellen + " Stellen");

		}
	}
}
